name: CI

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 7.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release

    - name: Publish
      run: |
        echo "PUBLISH_PATH=$(pwd)/publish" > .env
        export $(cat .env | xargs)
        dotnet publish -c Release -o ./publish
      shell: bash

    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: XDebugToggler
        path: ./publish

    - name: Set Git Identity
      run: |
        git config --global user.email "oguzhankrcb@gmail.com"
        git config --global user.name "Oğuzhan KARACABAY"
      env:
        GIT_AUTHOR_EMAIL: oguzhankrcb@gmail.com
        GIT_AUTHOR_NAME: Oğuzhan KARACABAY
        GIT_COMMITTER_EMAIL: oguzhankrcb@gmail.com
        GIT_COMMITTER_NAME: Oğuzhan KARACABAY
        
    - name: Get Latest Release
      id: get_latest_release
      run: |
        git pull
        latest_release="$(git describe --tags --abbrev=0 || echo v1.0.0)"
        echo "latest_release=$latest_release" >> $GITHUB_ENV
      shell: bash

    - name: Create New Release
      id: create_release
      run: |
        latest_release="${{ env.latest_release }}"
        if [ -z "$latest_release" ]; then
          new_version="v1.0.0"  # İlk sürüm
        else
          # Artan bir sürüm numarası oluştur
          major_version=$(echo "$latest_release" | cut -d. -f1 | sed 's/v//')
          minor_version=$(echo "$latest_release" | cut -d. -f2)
          patch_version=$(echo "$latest_release" | cut -d. -f3)
          new_patch_version=$((patch_version + 1))
          new_version="v$major_version.$minor_version.$new_patch_version"
        fi
        echo "New Release Version: $new_version"
        echo "NewReleaseVersion=$new_version" >> $GITHUB_ENV
      shell: bash
      
    - name: Push New Release
      run: git tag -a ${{ env.NewReleaseVersion }} -m "Release ${{ env.NewReleaseVersion }}"
      if: success()

    - name: Zip Files
      shell: pwsh
      run: |
        Compress-Archive -Path ./publish -DestinationPath XDebugToggler.zip

    - name: Create GitHub Release
      id: create_github_release
      uses: softprops/action-gh-release@v1
      with:
        files: ./XDebugToggler.zip
        tag_name: ${{ env.NewReleaseVersion }}
        name: ${{ env.NewReleaseVersion }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
